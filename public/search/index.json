[{"content":"学习golang已经有一段时间了，一直是跟着别人的代码一个一个敲，目前有一点自己的项目理解，所以决定自己使用go来完成一个商城项目，本教程以一个小白的角度搭建，清晰易懂\n框架的选择 本项目使用 gin + sqlx + viper + casbin\n数据库：MySQL\n缓存：Redis\n接口文档：swagger\n开发环境：go1.20 、MySQL8.0 、（redis暂时还没用上）\n项目地址:https://github.com/rice408s/rmall 项目结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ├── api // 接口 ├── config // 配置文件 ├── docs // swagger文档 ├── dao\t//数据操作层 ├── global // 全局变量 ├── initialize // 初始化 ├── model // 数据库模型 ├── router // 路由 ├── service // 服务 ├── utils // 工具 ├── sql\t// 存放sql文件 ├── test\t// 存放测试文件 ├── config.yaml // 配置文件 ├── log.log\t// 日志文件 ├── main.go // 入口 ├── README.md // 说明文档 ├── go.mod\t// go包管理工具 项目初始化 创建初始化项目\n1 mkdir rmall \u0026amp;\u0026amp; cd rmall \u0026amp;\u0026amp; go mod init rmall 按照项目结构依次创建文件\n基础配置 我们在 config 目录下创建 config.go 文件，写入如下配置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package config type Config struct { Mysql Mysql `mapstructure:\u0026#34;mysql\u0026#34; json:\u0026#34;mysql\u0026#34; yaml:\u0026#34;mysql\u0026#34;` } // Mysql MySQL配置 type Mysql struct { Host string `mapstructure:\u0026#34;host\u0026#34; json:\u0026#34;host\u0026#34; yaml:\u0026#34;host\u0026#34;` // 主机名 Port int `mapstructure:\u0026#34;port\u0026#34; json:\u0026#34;port\u0026#34; yaml:\u0026#34;port\u0026#34;` // 端口号 Username string `mapstructure:\u0026#34;username\u0026#34; json:\u0026#34;username\u0026#34; yaml:\u0026#34;username\u0026#34;` // 用户名 Password string `mapstructure:\u0026#34;password\u0026#34; json:\u0026#34;password\u0026#34; yaml:\u0026#34;password\u0026#34;` // 密码 Dbname string `mapstructure:\u0026#34;dbname\u0026#34; json:\u0026#34;dbname\u0026#34; yaml:\u0026#34;dbname\u0026#34;` // 数据库名 Params string `mapstructure:\u0026#34;params\u0026#34; json:\u0026#34;params\u0026#34; yaml:\u0026#34;params\u0026#34;` // 链接参数 } 然后在 global 下创建 global.go 文件，写入下列代码\n1 2 3 4 5 6 7 8 9 10 package global import ( \u0026#34;rmall/config\u0026#34; ) // 定义全局变量 var ( Config config.Config ) 通过全局变量，我们就可以轻松的访问配置文件中的数据了\n编写配置文件 这里的配置文件使用的是 yaml 文件，我们在项目的根目录下创建 config.yaml，写入如下配置\n1 2 3 4 5 6 7 mysql: host: \u0026#34;127.0.0.1\u0026#34; port: \u0026#34;3306\u0026#34; username: \u0026#34;root\u0026#34; password: \u0026#34;123456\u0026#34; dbname: \u0026#34;rmall\u0026#34; params: \u0026#34;charset=utf8mb4\u0026amp;parseTime=True\u0026#34; 这里的配置文件的值根据自己的实际情况去书写\n载入配置文件 这里使用的go的viper包来加载配置文件，获取viper包\n1 go get github.com/spf13/viper 在 initialize 目录下创建 config.go ，写入\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package initialize import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spf13/viper\u0026#34; \u0026#34;rmall/global\u0026#34; ) func LoadConfig(path string) { viper.SetConfigFile(path) viper.SetConfigName(\u0026#34;config\u0026#34;) //文件名为config viper.SetConfigType(\u0026#34;yaml\u0026#34;)\t//文件后缀为yaml //添加配置文件所在的路径，注意在Linux环境下%GOPATH要替换为$GOPATH viper.AddConfigPath(\u0026#34;.\u0026#34;)\t//配置文件路径 if err := viper.ReadInConfig(); err != nil { fmt.Println(\u0026#34;viper.ReadInConfig failed,err:\u0026#34;, err) return } err := viper.Unmarshal(\u0026amp;global.Config) //将读取到的配置解析到创建的全局变量上 if err != nil { fmt.Println(\u0026#34;viper.Unmarshal failed,err:\u0026#34;, err) return } } 再在 initialize 目录下创建 run.go，写入下列代码\n1 2 3 4 5 package initialize func Run() { LoadConfig(\u0026#34;./config.yaml\u0026#34;) //配置文件的路径 } 再在 main.go 中添加下列代码\n1 2 3 4 5 6 7 8 9 package main import ( \u0026#34;rmall/initialize\u0026#34; ) func main() { initialize.Run() } 这样配置文件就配置完成了，之后的函数调用都可以写在 Run() 方法中，这样 main() 只需要调用 Run() 就行了，保持简洁\n","date":"2023-11-22T00:00:00Z","image":"http://47.108.226.33/p/%E4%BB%8E0%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8Egin%E7%9A%84rmall%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E4%B8%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/golang_6_hu52ed627a3c4988aa525d5b1762dbe555_39559_120x120_fill_q75_box_smart1.jpeg","permalink":"http://47.108.226.33/p/%E4%BB%8E0%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8Egin%E7%9A%84rmall%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E4%B8%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","title":"从0实现基于gin的rmall商城项目（一）配置文件"}]